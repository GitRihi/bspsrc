/*
 ** 2013 May 23
 **
 ** The author disclaims copyright to this source code.  In place of
 ** a legal notice, here is a blessing:
 **    May you do good and not evil.
 **    May you find forgiveness for yourself and forgive others.
 **    May you share freely, never taking more than you give.
 */
package info.ata4.bspsrc.modules;

import info.ata4.bsplib.BspFileReader;
import info.ata4.bsplib.entity.Entity;
import info.ata4.bspsrc.VmfWriter;
import info.ata4.bspsrc.modules.entity.Camera;
import info.ata4.log.LogUtils;

import java.util.*;
import java.util.logging.Level;
import java.util.logging.Logger;

/**
 * VMF metadata control class.
 * 
 * @author Nico Bergemann <barracuda415 at yahoo.de>
 */
public class VmfMeta extends ModuleDecompile {

    // logger
    private static final Logger L = LogUtils.getLogger();

    // UID mappings
    private Map<Integer, Integer> faceUIDs = new HashMap<>();
    private Map<Integer, Integer> origFaceUIDs = new HashMap<>();
    private Map<Short, Integer> dispinfoUIDs = new HashMap<>();

    // UID blacklist
    private Set<Integer> uidbl = new HashSet<>();

    // VMF unique ID
    private int uid = 0;

    // Visgroup seperator char
    public static final char VISGROUP_SEPERATOR = '/';
    // visgroup root node. Will not actualy be written in the final vmf but rather serves as the root node which contains every visgroup
    private Visgroup rootVisgroup = new Visgroup("root", 0, null, new HashSet<>());
    // number for indexing every visgroup incrementally
    private int visgroupIndex = 1;
    // reserved visgroup ids. Main use for nmrih objectives visgroups
    private Map<String, Integer> reservedVisgroups = new HashMap<>();

    // camera list
    private List<Camera> cameras = new ArrayList<>();

    private Entity worldspawn;
    private String comment;

    public VmfMeta(BspFileReader reader, VmfWriter writer) {
        super(reader, writer);

        worldspawn = bsp.entities.get(0);

        // check for existing map comment
        if (worldspawn.getValue("comment") != null) {
            L.log(Level.INFO, "Map comment: {0}", worldspawn.getValue("comment"));
        }
    }

    public Set<Integer> getUIDBlackList() {
        return uidbl;
    }

    /**
     * Returns a new VMF unique ID.
     * 
     * @return UID
     */
    public int getUID() {
        if (uidbl.isEmpty()) {
            return uid++;
        } else {
            // increment ID until it's not found in the blacklist anymore
            do {
                uid++;
            } while (uidbl.contains(uid));

            return uid;
        }
    }

    /**
     * Returns the VMF UID for the corresponding face index.
     * It automatically looks up the original face if the split face wasn't found.
     * 
     * @param iface face index
     * @return brush side ID or -1 if the index isn't mapped yet
     */
    public int getFaceUID(int iface) {
        if (faceUIDs.containsKey(iface)) {
            return faceUIDs.get(iface);
        } else {
            // try origface
            int ioface = bsp.faces.get(iface).origFace;
            if (origFaceUIDs.containsKey(ioface)) {
                return origFaceUIDs.get(ioface);
            }
        }

        // not found
        return -1;
    }

    /**
     * Sets the VMF UID for the given face index.
     * 
     * @param iface face index
     * @param id VMF UID generated by {@link #getUID}
     * @return previously mapped UID or <tt>null</tt> if there was no mapping
     */
    public Integer setFaceUID(int iface, int id) {
        return faceUIDs.put(iface, id);
    }

    /**
     * Sets the VMF UID for the given original face index.
     * 
     * @param iface face index
     * @param id VMF UID generated by {@link #getUID}
     * @return previously mapped UID or <tt>null</tt> if there was no mapping
     */
    public Integer setOrigFaceUID(int iface, int id) {
        return origFaceUIDs.put(iface, id);
    }

    /**
     * Returns the VMF UID for the corresponding dispInfo index.
     * 
     * @param idispinfo dispinfo index
     * @return brush side ID or -1 if the index isn't mapped yet
     */
    public int getDispInfoUID(short idispinfo) {
        if (dispinfoUIDs.containsKey(idispinfo)) {
            return dispinfoUIDs.get(idispinfo);
        }

        // not found
        return -1;
    }

    /**
     * Sets the VMF UID for the given displacement info index.
     * 
     * @param idispinfo dispinfo index
     * @param id VMF UID generated by {@link #getUID}
     * @return previously mapped UID or <tt>null</tt> if there was no mapping
     */
    public Integer setDispInfoUID(short idispinfo, int id) {
        return dispinfoUIDs.put(idispinfo, id);
    }

    public void setComment(String comment) {
        this.comment = comment;
    }

    public String getComment() {
        return comment;
    }

    /**
     * Writes the worldspawn header
     */
    public void writeWorldHeader() {
        writer.start("world");
        writer.put("id", getUID());
        writer.put(worldspawn);

        // write comment
        if (comment != null) {
            writer.put("comment", comment);
        }

        writer.put("classname", "worldspawn");
    }

    /**
     * Writes the worldspawn footer
     */
    public void writeWorldFooter() {
        writer.end("world");
    }

    public void writeVisgroups() {
        if (rootVisgroup.visgroups.isEmpty()) {
            return;
        }

        writer.start("visgroups");
        rootVisgroup.visgroups.forEach(this::writeVisgroup);
        writer.end("visgroups");
    }

    private void writeVisgroup(Visgroup visgroup) {
        writer.start("visgroup");

        writer.put("name", visgroup.name);
        writer.put("visgroupid", visgroup.id);
        visgroup.visgroups.forEach(this::writeVisgroup);

        writer.end("visgroup");
    }

    public void writeMetaVisgroup(String visgroupName) {
        writer.start("editor");
        writer.put("visgroupid", getVisgroup(visgroupName).id);
        writer.end("editor");
    }

    public void writeMetaVisgroups(List<String> visgroupNames) { 
        writer.start("editor");
        for (String visgroupName : visgroupNames) {
            writer.put("visgroupid", getVisgroup(visgroupName).id);
        }
        writer.end("editor");
    }

    private Visgroup getVisgroup(String visgroupName) {
        if (visgroupName.isEmpty())
            throw new IllegalArgumentException("A visgroup cannot have an empty name");

        Visgroup parentVisgroup = rootVisgroup;
        for (String name : visgroupName.split(String.valueOf(VISGROUP_SEPERATOR))) {
            parentVisgroup = getVisgroup(parentVisgroup, name);
        }

        return parentVisgroup;
    }

    private Visgroup getVisgroup(Visgroup parentVisgroup, String visgroupName) {
        if (visgroupName.isEmpty())
            throw new IllegalArgumentException("A visgroup cannot have an empty name");

        Optional<Visgroup> optionalVisgroup = parentVisgroup.visgroups.stream()
                .filter(visgroup -> visgroup.name.equals(visgroupName))
                .findAny();

        if (optionalVisgroup.isPresent()) {
            return optionalVisgroup.get();
        } else {
            Integer visgroupId = reservedVisgroups.get(getPathForVisgroup(parentVisgroup) + VISGROUP_SEPERATOR + visgroupName);
            if (visgroupId == null) {
                while (reservedVisgroups.containsValue(visgroupId = visgroupIndex++));
            }

            Visgroup targetVisgroup = new Visgroup(visgroupName, visgroupId, parentVisgroup);
            parentVisgroup.visgroups.add(targetVisgroup);
            return targetVisgroup;
        }
    }

    /**
     * Reserves the specified id for the specified visgroup.
     * <p>
     * This guarantees that the specified visgroup will use the specified id instead of a generated one.
     * <p>
     * <b>WARNING:</b> Any calls to this method must be made <b>before</b> any subsequent calls are made to either {@link #writeMetaVisgroup(String)} or {@link #writeMetaVisgroups(List)}. Else no guarantee can be made that the specified id can be reserved
     *
     * @param visgroupName Visgroup name which should use a specific id. A nested visgroup can be written like "outerVisgroup + VmfMeta.VISGROUP_SEPERATOR + innerVisgroup"
     * @param visgroupId Id, the specified visgroup will use in the vmf
     */
    public void reserveVisgroupId(String visgroupName, int visgroupId) {
        if (visgroupName.isEmpty())
            throw new IllegalArgumentException("A visgroup cannot have an empty name");

        if (reservedVisgroups.containsValue(visgroupId)) {
            String duplicatedVisgroupName = reservedVisgroups.entrySet().stream()
                    .filter(entry -> entry.getValue() == visgroupId)
                    .findAny()
                    .map(Map.Entry::getKey)
                    .orElse("null");

            L.warning(String.format("Tried to reserve visgroup '%s' with id %d, which is already reserved by '%s'", visgroupName, visgroupId, duplicatedVisgroupName));
            return;
        }

        if (reservedVisgroups.containsKey(visgroupName))
            L.warning(String.format("Visgroup '%s' is already reserved with id %d. Overriding with %d", visgroupName, reservedVisgroups.get(visgroupName), visgroupId));

        reservedVisgroups.put(visgroupName, visgroupId);
    }

    /**
     * @param visgroup A visgroup for which a path should be generated
     * @return A String which represents path to the specified visgroup. For example for a visgroup 'InnerVis', which is in a visgroup 'OuterVis', getPathForVisgroup(InnerVis) returns "OuterVis + {@link #VISGROUP_SEPERATOR} + InnerVis"
     */
    private static String getPathForVisgroup(Visgroup visgroup) {
        StringBuilder path = new StringBuilder(visgroup.name);

        Visgroup parentVisgroup = visgroup;
        while ((parentVisgroup = parentVisgroup.parent) != null && parentVisgroup.id != 0) {
            path.insert(0, parentVisgroup.name + VISGROUP_SEPERATOR);
        }

        return path.toString();
    }

    public void writeCameras() {
        writer.start("cameras");

        if (cameras.isEmpty()) {
            writer.put("activecamera", -1);
        } else {
            writer.put("activecamera", 0);

            for (Camera camera : cameras) {
                writer.start("camera");
                writer.put("position", camera.pos, 2);
                writer.put("look", camera.look, 2);
                writer.end("camera");
            }
        }

        writer.end("cameras");
    }

    public List<Camera> getCameras() {
        return cameras;
    }

    /**
     * Visgroup class for representing visgroups in a Tree like structure
     */
    private static class Visgroup
    {
        public String name;
        public int id;
        public Visgroup parent;
        public Set<Visgroup> visgroups;

        public Visgroup(String name, int id, Visgroup parent) {
            this(name, id, parent, new HashSet<>());
        }

        public Visgroup(String name, int id, Visgroup parent, Set<Visgroup> visgroups) {
            Objects.requireNonNull(name);
            Objects.requireNonNull(visgroups);

            this.name = name;
            this.id = id;
            this.parent = parent;
            this.visgroups = visgroups;
        }

        @Override
        public boolean equals(Object o) {
            if (this == o) return true;
            if (o == null || getClass() != o.getClass()) return false;

            Visgroup visGroup = (Visgroup) o;

            return id == visGroup.id;
        }
    }
}
